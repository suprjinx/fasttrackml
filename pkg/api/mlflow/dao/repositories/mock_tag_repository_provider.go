// Code generated by mockery v2.34.0. DO NOT EDIT.

package repositories

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	models "github.com/G-Research/fasttrackml/pkg/api/mlflow/dao/models"
)

// MockTagRepositoryProvider is an autogenerated mock type for the TagRepositoryProvider type
type MockTagRepositoryProvider struct {
	mock.Mock
}

// CreateExperimentTag provides a mock function with given fields: ctx, experimentTag
func (_m *MockTagRepositoryProvider) CreateExperimentTag(ctx context.Context, experimentTag *models.ExperimentTag) error {
	ret := _m.Called(ctx, experimentTag)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.ExperimentTag) error); ok {
		r0 = rf(ctx, experimentTag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateRunTagWithTransaction provides a mock function with given fields: ctx, tx, runID, key, value
func (_m *MockTagRepositoryProvider) CreateRunTagWithTransaction(ctx context.Context, tx *gorm.DB, runID string, key string, value string) error {
	ret := _m.Called(ctx, tx, runID, key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, string, string, string) error); ok {
		r0 = rf(ctx, tx, runID, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, tag
func (_m *MockTagRepositoryProvider) Delete(ctx context.Context, tag *models.Tag) error {
	ret := _m.Called(ctx, tag)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Tag) error); ok {
		r0 = rf(ctx, tag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByRunIDAndKey provides a mock function with given fields: ctx, runID, key
func (_m *MockTagRepositoryProvider) GetByRunIDAndKey(ctx context.Context, runID string, key string) (*models.Tag, error) {
	ret := _m.Called(ctx, runID, key)

	var r0 *models.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.Tag, error)); ok {
		return rf(ctx, runID, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.Tag); ok {
		r0 = rf(ctx, runID, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, runID, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDB provides a mock function with given fields:
func (_m *MockTagRepositoryProvider) GetDB() *gorm.DB {
	ret := _m.Called()

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// NewMockTagRepositoryProvider creates a new instance of MockTagRepositoryProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTagRepositoryProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTagRepositoryProvider {
	mock := &MockTagRepositoryProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
