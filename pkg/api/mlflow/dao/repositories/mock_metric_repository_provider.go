// Code generated by mockery v2.34.0. DO NOT EDIT.

package repositories

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	models "github.com/G-Research/fasttrackml/pkg/api/mlflow/dao/models"

	request "github.com/G-Research/fasttrackml/pkg/api/mlflow/api/request"

	sql "database/sql"
)

// MockMetricRepositoryProvider is an autogenerated mock type for the MetricRepositoryProvider type
type MockMetricRepositoryProvider struct {
	mock.Mock
}

// CreateBatch provides a mock function with given fields: ctx, run, batchSize, params
func (_m *MockMetricRepositoryProvider) CreateBatch(ctx context.Context, run *models.Run, batchSize int, params []models.Metric) error {
	ret := _m.Called(ctx, run, batchSize, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Run, int, []models.Metric) error); ok {
		r0 = rf(ctx, run, batchSize, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDB provides a mock function with given fields:
func (_m *MockMetricRepositoryProvider) GetDB() *gorm.DB {
	ret := _m.Called()

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// GetMetricHistories provides a mock function with given fields: ctx, experimentIDs, runIDs, metricKeys, viewType, limit
func (_m *MockMetricRepositoryProvider) GetMetricHistories(ctx context.Context, experimentIDs []string, runIDs []string, metricKeys []string, viewType request.ViewType, limit int32) (*sql.Rows, func(*sql.Rows, interface{}) error, error) {
	ret := _m.Called(ctx, experimentIDs, runIDs, metricKeys, viewType, limit)

	var r0 *sql.Rows
	var r1 func(*sql.Rows, interface{}) error
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, []string, []string, request.ViewType, int32) (*sql.Rows, func(*sql.Rows, interface{}) error, error)); ok {
		return rf(ctx, experimentIDs, runIDs, metricKeys, viewType, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, []string, []string, request.ViewType, int32) *sql.Rows); ok {
		r0 = rf(ctx, experimentIDs, runIDs, metricKeys, viewType, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Rows)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, []string, []string, request.ViewType, int32) func(*sql.Rows, interface{}) error); ok {
		r1 = rf(ctx, experimentIDs, runIDs, metricKeys, viewType, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(func(*sql.Rows, interface{}) error)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, []string, []string, []string, request.ViewType, int32) error); ok {
		r2 = rf(ctx, experimentIDs, runIDs, metricKeys, viewType, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetMetricHistoryBulk provides a mock function with given fields: ctx, runIDs, key, limit
func (_m *MockMetricRepositoryProvider) GetMetricHistoryBulk(ctx context.Context, runIDs []string, key string, limit int) ([]models.Metric, error) {
	ret := _m.Called(ctx, runIDs, key, limit)

	var r0 []models.Metric
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, string, int) ([]models.Metric, error)); ok {
		return rf(ctx, runIDs, key, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, string, int) []models.Metric); ok {
		r0 = rf(ctx, runIDs, key, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Metric)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, string, int) error); ok {
		r1 = rf(ctx, runIDs, key, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetricHistoryByRunIDAndKey provides a mock function with given fields: ctx, runID, key
func (_m *MockMetricRepositoryProvider) GetMetricHistoryByRunIDAndKey(ctx context.Context, runID string, key string) ([]models.Metric, error) {
	ret := _m.Called(ctx, runID, key)

	var r0 []models.Metric
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]models.Metric, error)); ok {
		return rf(ctx, runID, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []models.Metric); ok {
		r0 = rf(ctx, runID, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Metric)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, runID, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockMetricRepositoryProvider creates a new instance of MockMetricRepositoryProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetricRepositoryProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetricRepositoryProvider {
	mock := &MockMetricRepositoryProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
